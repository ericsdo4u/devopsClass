#name: Deploy Dockerhub
#
#on:
#  push:
#    branches:
#      - dev
#
#jobs:
#  build-and-deploy:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up JDK 17
#        uses: actions/checkout@v2
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#          cache: maven
#
#      - name: Restore Maven Package
#        uses: actions/cache@v2
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-maven-${{ hashFiles('/*.xml') }}
#          restore-keys: |
#            ${{ runner.os }}-maven-
#
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Build Docker image
#        run: docker build -t ericsdo4u/devops-class:latest .
#
#      - name: Push Docker image to Docker Hub
#        run: docker push ericsdo4u/devops-class:latest
#
#      - name: Deploy Docker Container on AWS
#        uses: appleboy/ssh-action@master
#      with:
#        host: ${{ secrets.AWS_HOST }}      # Your AWS instance IP from secrets
#        username: ${{ secrets.AWS_USER }}  # SSH username from secrets
#        key: ${{ secrets.AWS_KEY }}        # SSH private key from secrets
#        port: 22                           # SSH port (default 22)
#        script: |
#        if ! command -v docker &> /dev/null; then
#          echo "Docker not found. Installing Docker..."
#          curl -fsSL https://get.docker.com -o get-docker.sh
#          sudo sh get-docker.sh
#        else
#          echo "Docker is already installed."
#          fi
#          echo "Pulling latest Docker image from Docker Hub..."
#          sudo docker pull baliqis/userapp:latest
#
#          if [ $(docker ps -q -f name=devop-container) ]; then
#            echo "Stopping existing container..."
#            sudo docker stop devop-container
#            sudo docker rm devop-container
#
#          else
#            echo "No existing container found, creating a new one..."
#
#            fi
#
#            echo "Running the new container..."
#            sudo docker run -d -p 8084:8084 --name devop-container baliqis/userapp:latest
#            echo "Container deployed successfully!"
#
#            echo "Listing running containers..."
#            sudo docker ps

#name: Deploy Dockerhub
#
#on:
#  push:
#    branches:
#      - hello
#
#jobs:
#  build-and-deploy:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up JDK 17
#        uses: actions/checkout@v2
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#          cache: maven
#
#      - name: Restore Maven Package
#        uses: actions/cache@v2
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-maven-${{ hashFiles('/*.xml') }}
#          restore-keys: |
#            ${{ runner.os }}-maven-
#
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Build Docker image
#        run: docker build -t precious002/devops-app:latest .
#
#      - name: Push Docker image to Docker Hub
#        run: docker push precious002/devops-app:latest
#
#      - name: Deploy to AWS EC2
#        env:
#              AWS_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
#              AWS_HOST: ${{ secrets.AWS_HOST }}
#        run: |
#            echo "${{ secrets.AWS_PRIVATE_KEY }}" > private_key.pem
#            chmod 600 private_key.pem
#            ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.AWS_HOST }} << 'EOF'
#              sudo chmod 666 /var/run/docker.sock
#              docker pull precious002/devops-app:latest
#              docker stop devops-app || true
#              docker rm devops-app || true
#              docker run -d --name devops-app -p 8080:8080 precious002/devops-app:latest
#         EOF
name: Deploy Dockerhub

on:
  push:
    branches:
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Restore Maven cache
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t ericsdo4u/devops-class:latest .

      - name: Push Docker image to Docker Hub
        run: docker push ericsdo4u/devops-class:latest

      - name: Deploy to AWS EC2
        env:
          AWS_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
          AWS_HOST: ${{ secrets.AWS_HOST }}
        run: |
          echo "${{ secrets.AWS_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.AWS_HOST }} << 'EOF'
            sudo chmod 666 /var/run/docker.sock
            docker pull ericsdo4u/devops-class:latest
            docker stop devops-class || true
            docker rm devops-class || true
            docker run -d --name devops-app -p 8080:8080 ericsdo4u/devops-class:latest
          EOF